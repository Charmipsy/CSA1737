import heapq

class Node:
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0  # Cost from start to node
        self.h = 0  # Heuristic cost from node to end
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

    def __hash__(self):
        return hash(self.position)

def astar(maze, start, end):
    start_node = Node(None, start)
    end_node = Node(None, end)

    open_list = []
    closed_list = set()

    heapq.heappush(open_list, start_node)

    print(f"Start: {start}, End: {end}")
    print("Initial Open List:", open_list)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node)

        print(f"\nCurrent Node: {current_node.position}")
        print("Open List:", [node.position for node in open_list])
        print("Closed List:", [node.position for node in closed_list])

        if current_node == end_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]

        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]: # Adjacent squares
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[0]) - 1) or node_position[1] < 0:
                continue

            if maze[node_position[0]][node_position[1]] != 0:
                continue

            new_node = Node(current_node, node_position)
            children.append(new_node)

        print("Children:", [child.position for child in children])

        for child in children:
            if child in closed_list:
                continue

            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h

            if child in open_list:
                existing_node = next(x for x in open_list if x == child)
                if child.g > existing_node.g:
                    continue

            heapq.heappush(open_list, child)
            print(f"Added to Open List: {child.position} with f={child.f}, g={child.g}, h={child.h}")

def main():
    maze = [
        [0, 1, 0, 0, 0, 0, 0],
        [0, 1, 0, 1, 1, 1, 0],
        [0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    end = (6, 6)

    path = astar(maze, start, end)
    print("\nPath:", path)

if __name__ == '__main__':
    main()
