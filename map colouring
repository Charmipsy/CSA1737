def is_safe(node, color, colors, graph):
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def map_coloring_util(graph, colors, node, m):
    if node == len(graph):
        return True
    
    for color in range(1, m+1):
        if is_safe(node, color, colors, graph):
            colors[node] = color
            if map_coloring_util(graph, colors, node+1, m):
                return True
            colors[node] = 0
    
    return False

def map_coloring(graph, m):
    colors = [0] * len(graph)
    if not map_coloring_util(graph, colors, 0, m):
        return None
    return colors

def print_solution(colors):
    for i in range(len(colors)):
        print(f"Node {i} ---> Color {colors[i]}")

graph = [
    [1, 2, 3],
    [0, 2],
    [0, 1, 3],
    [0, 2]
]

m = 3  # Number of colors
solution = map_coloring(graph, m)
if solution:
    print("Solution exists:")
    print_solution(solution)
else:
    print("No solution exists.")
