MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
    if depth == 3:
        print(f"Reached depth limit. Returning value {values[nodeIndex]}")
        return values[nodeIndex]

    if maximizingPlayer:
        print(f"Maximizing player at depth {depth}, nodeIndex {nodeIndex}, alpha {alpha}, beta {beta}")
        best = MIN

        for i in range(0, 2):
            print(f"Exploring child node at depth {depth+1}, nodeIndex {nodeIndex*2+i}")
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)

            print(f"At depth {depth}, nodeIndex {nodeIndex}, best {best}, alpha {alpha}, beta {beta}")
            if beta <= alpha:
                print(f"Pruning at depth {depth}, nodeIndex {nodeIndex}")
                break

        return best

    else:
        print(f"Minimizing player at depth {depth}, nodeIndex {nodeIndex}, alpha {alpha}, beta {beta}")
        best = MAX

        for i in range(0, 2):
            print(f"Exploring child node at depth {depth+1}, nodeIndex {nodeIndex*2+i}")
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)

            print(f"At depth {depth}, nodeIndex {nodeIndex}, best {best}, alpha {alpha}, beta {beta}")
            if beta <= alpha:
                print(f"Pruning at depth {depth}, nodeIndex {nodeIndex}")
                break

        return best

if __name__ == "__main__":
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    print("Initial values array:", values)
    print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))
