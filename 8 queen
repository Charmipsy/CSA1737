def print_board(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    for i in range(col):
        if board[row][i]:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False
    for i, j in zip(range(row, len(board)), range(col, -1, -1)):
        if board[i][j]:
            return False
    return True

def solve_n_queens_util(board, col):
    if col >= len(board):
        return True

    for i in range(len(board)):
        print(f"Trying to place queen at ({i}, {col})")
        if is_safe(board, i, col):
            board[i][col] = 1
            print(f"Placed queen at ({i}, {col})")
            print_board(board)
            if solve_n_queens_util(board, col + 1):
                return True
            board[i][col] = 0
            print(f"Backtracking from ({i}, {col})")
            print_board(board)

    return False

def solve_n_queens():
    board = [[0 for _ in range(8)] for _ in range(8)]
    if not solve_n_queens_util(board, 0):
        print("Solution does not exist")
        return False
    print("Solution found:")
    print_board(board)
    return True

solve_n_queens()
